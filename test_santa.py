from collections import OrderedDict
from itertools import izip
import unittest
from santa import checksum, factor_pairs

class TestHappyChristmasEnsured(unittest.TestCase):

    def test_factor_pairs__simple_cases(self):
        prime_factorisations = [
            OrderedDict([(2, 1)]), 
            OrderedDict([(2, 2)]), 
            OrderedDict([(2, 2), (3, 2)]),
        ]
        expecteds = [
            {(1, 2), (2, 1)},
            {(1, 4), (4, 1), (2, 2)},
            {(1, 36), (2, 18), (3, 12), (4, 9), (6, 6),
             (36, 1), (18, 2), (12, 3), (9, 4)}
        ]
        cases = izip(prime_factorisations, expecteds)
        for prime_factorisation, expected in cases:
            actual = factor_pairs(prime_factorisation)
            self.assertEqual(expected, actual)

    def test_factor_pairs__head_elf_checksum(self):
        '''Santa calculated all the factor pairs of 6300000000 by hand because 
        he is a *very* bored guy most of the year. That and the fact he cares so
        much about Christmas of course!
        '''
        factor_pairs_unordered = {
            (6300000000, 1), (3150000000, 2), (2100000000, 3), (1575000000, 4),
            (1260000000, 5), (1050000000, 6), (900000000, 7), (787500000, 8),
            (700000000, 9), (630000000, 10), (525000000, 12), (450000000, 14),
            (420000000, 15), (393750000, 16), (350000000, 18), (315000000, 20),
            (300000000, 21), (262500000, 24), (252000000, 25), (225000000, 28),
            (210000000, 30), (196875000, 32), (180000000, 35), (175000000, 36),
            (157500000, 40), (150000000, 42), (140000000, 45), (131250000, 48),
            (126000000, 50), (112500000, 56), (105000000, 60), (100000000, 63),
            (98437500, 64), (90000000, 70), (87500000, 72), (84000000, 75),
            (78750000, 80), (75000000, 84), (70000000, 90), (65625000, 96),
            (63000000, 100), (60000000, 105), (56250000, 112), (52500000, 120),
            (50400000, 125), (50000000, 126), (49218750, 128), (45000000, 140),
            (43750000, 144), (42000000, 150), (39375000, 160), (37500000, 168),
            (36000000, 175), (35000000, 180), (32812500, 192), (31500000, 200),
            (30000000, 210), (28125000, 224), (28000000, 225), (26250000, 240),
            (25200000, 250), (25000000, 252), (24609375, 256), (22500000, 280),
            (21875000, 288), (21000000, 300), (20000000, 315), (19687500, 320),
            (18750000, 336), (18000000, 350), (17500000, 360), (16800000, 375),
            (16406250, 384), (15750000, 400), (15000000, 420), (14062500, 448),
            (14000000, 450), (13125000, 480), (12600000, 500), (12500000, 504),
            (12000000, 525), (11250000, 560), (10937500, 576), (10500000, 600),
            (10080000, 625), (10000000, 630), (9843750, 640), (9375000, 672),
            (9000000, 700), (8750000, 720), (8400000, 750), (8203125, 768),
            (7875000, 800), (7500000, 840), (7200000, 875), (7031250, 896),
            (7000000, 900), (6562500, 960), (6300000, 1000), (6250000, 1008),
            (6000000, 1050), (5625000, 1120), (5600000, 1125), (5468750, 1152),
            (5250000, 1200), (5040000, 1250), (5000000, 1260), (4921875, 1280),
            (4687500, 1344), (4500000, 1400), (4375000, 1440), (4200000, 1500),
            (4000000, 1575), (3937500, 1600), (3750000, 1680), (3600000, 1750),
            (3515625, 1792), (3500000, 1800), (3360000, 1875), (3281250, 1920),
            (3150000, 2000), (3125000, 2016), (3000000, 2100), (2812500, 2240),
            (2800000, 2250), (2734375, 2304), (2625000, 2400), (2520000, 2500),
            (2500000, 2520), (2400000, 2625), (2343750, 2688), (2250000, 2800),
            (2187500, 2880), (2100000, 3000), (2016000, 3125), (2000000, 3150),
            (1968750, 3200), (1875000, 3360), (1800000, 3500), (1750000, 3600),
            (1680000, 3750), (1640625, 3840), (1575000, 4000), (1562500, 4032),
            (1500000, 4200), (1440000, 4375), (1406250, 4480), (1400000, 4500),
            (1312500, 4800), (1260000, 5000), (1250000, 5040), (1200000, 5250),
            (1171875, 5376), (1125000, 5600), (1120000, 5625), (1093750, 5760),
            (1050000, 6000), (1008000, 6250), (1000000, 6300), (984375, 6400),
            (937500, 6720), (900000, 7000), (875000, 7200), (840000, 7500),
            (800000, 7875), (787500, 8000), (781250, 8064), (750000, 8400),
            (720000, 8750), (703125, 8960), (700000, 9000), (672000, 9375),
            (656250, 9600), (630000, 10000), (625000, 10080), (600000, 10500),
            (562500, 11200), (560000, 11250), (546875, 11520), (525000, 12000),
            (504000, 12500), (500000, 12600), (480000, 13125), (468750, 13440),
            (450000, 14000), (437500, 14400), (420000, 15000), (403200, 15625),
            (400000, 15750), (393750, 16000), (390625, 16128), (375000, 16800),
            (360000, 17500), (350000, 18000), (336000, 18750), (328125, 19200),
            (315000, 20000), (312500, 20160), (300000, 21000), (288000, 21875),
            (281250, 22400), (280000, 22500), (262500, 24000), (252000, 25000),
            (250000, 25200), (240000, 26250), (234375, 26880), (225000, 28000),
            (224000, 28125), (218750, 28800), (210000, 30000), (201600, 31250),
            (200000, 31500), (196875, 32000), (187500, 33600), (180000, 35000),
            (175000, 36000), (168000, 37500), (160000, 39375), (157500, 40000),
            (156250, 40320), (150000, 42000), (144000, 43750), (140625, 44800),
            (140000, 45000), (134400, 46875), (131250, 48000), (126000, 50000),
            (125000, 50400), (120000, 52500), (112500, 56000), (112000, 56250),
            (109375, 57600), (105000, 60000), (100800, 62500), (100000, 63000),
            (96000, 65625), (93750, 67200), (90000, 70000), (87500, 72000),
            (84000, 75000), (80640, 78125), (80000, 78750),
        }
        all_factor_pairs = factor_pairs_unordered.union(
            set( f[::-1] for f in factor_pairs_unordered )
        )

        self.assertEqual(6300000000, 2**8 * 3**2 * 5**8 * 7**1)
        prime_factorisation = OrderedDict([(2, 8), (3, 2), (5, 8), (7, 1)])
        actual = factor_pairs(prime_factorisation)
        self.assertEqual(all_factor_pairs, actual)

    def test_checksum_simple(self):
        factor_pairs = [
            {(1, 2), (2, 1)},
            {(1, 4), (4, 1), (2, 2)},
            {(1, 36), (2, 18), (3, 12), (4, 9), (6, 6),
             (36, 1), (18, 2), (12, 3), (9, 4)}
        ]
        outputs = [5, 25, 2100]
        cases = izip(factor_pairs, outputs)
        for factors, expected in cases:
            self.assertEqual(expected, checksum(factors))

    def test_checksum__happy_christmas(self):
        # 6300000000 in terms of its prime factors.
        prime_factorisation = OrderedDict([(2, 8), (3, 2), (5, 8), (7, 1)])
        factors = factor_pairs(prime_factorisation)
        self.assertEqual(77301763, checksum(factors))
